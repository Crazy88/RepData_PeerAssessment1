swirl()
?swirl
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col=red,pch=8,main="Big Apple Dats")
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind|Month,data=airquality)
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1)
)
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
cyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors())
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c"red","blue")
p1<-colorRampPalette(c"red","blue")
p1<-colorRampPalette(c("red","blue")
)
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(rgb(red,green,blue,alpha=.5)
)
p3<-colorRampPalette(rgb(red,green,blue,alpha=.5))
p3<-colorRampPalette(rgb(blue,green,alpha=.5))
p3<-colorRampPalette(rgb(blue,green,alpha=.5))
next()
nxt()
nxt()
play()
nxt()
p3<-colorRampPalette(rgb(blue,green,alpha=.5))
nxt()
nxt()
xnxt
nxt()
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe
showMe(cols)
pal(colorRampPalette(cols))
pal<-(colorRampPalette(cols))
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom(c("point","smooth")))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
str(myhigh)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturee)
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.)
qplot(hwy,data=mpg,facets=drv~.,bindwidth)
qplot(hwy,data=mpg,facets=drv~.,binwidth)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
rm(list=ls())
library(data.table)
library(datasets)
library(sqldf)
library(dplyr)
library(lubridate)
library(ggplot2)
library(timeDate)
library(scales)
setwd("C:/coursera/RepData_PeerAssessment1")
getwd()
# note: due to my company firewall, I can't automate the web pull or "unzipping".
# Starting with the activity.csv file landed locally:
amd<-read.csv('activity.csv')
str(amd)
# preprocessing: date field to datetime type, create weekdays, and time
# date to datetime data type
amd$date<-as.Date(amd$date)
table(amd$date)
# time to datetime data type
amd$interval<-as.POSIXct(strptime(sprintf("%04d",amd$interval),"%H%M"))
table(amd$interval)
# note: date part defaults to today, handle with formatting later
#amd$time<-as.numeric(amd$interval-trunc(amd$interval,"days"))
#table(amd$time)
#str(amd)
# aggregate: total steps by day
amd_daily<-aggregate(steps~date,amd,sum)
# aggregate: average steps by interval
amd_interval<-aggregate(steps~interval,amd,mean)
head(amd)
daily_mean<-mean(amd_daily$steps,na.rm=TRUE)
daily_mean
# calculate median
daily_median<-median(amd_daily$steps,na.rm=TRUE)
daily_median
g<-qplot(steps,data=amd_daily,binwidth=500)
g+geom_vline(xintercept=daily_median,col="blue",lwd=0.5)+
geom_vline(xintercept=daily_mean,col="red",lwd=0.5)+
geom_text(aes(daily_mean,6,label=round(daily_mean,2),hjust=-.25,color="red"))
labs(title="Mean Number of Steps per Day",x="Steps per Day",y="Number of Days")
max_steps<-max(amd_interval$steps)
max_steps
# calculate interval with maximum steps
max_interval<-amd_interval[which.max(amd_interval$steps),1]
max_interval
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
abline(h=max_steps,col="red",lwd=1)
text(x=(max_interval-9000),y=max_steps
,labels=round(max_steps,2),col="red",pos=1)
abline(v=max_interval,col="red",lwd=1)
text(x=max_interval,y=10
,labels=format(max_interval,format="%H:%M"),col="red",pos=4)
window()
window()
plot.new()
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
abline(h=max_steps,col="red",lwd=1)
text(x=(max_interval-9000),y=max_steps
,labels=round(max_steps,2),col="red",pos=1)
abline(v=max_interval,col="red",lwd=1)
text(x=max_interval,y=10
,labels=format(max_interval,format="%H:%M"),col="red",pos=4)
sum(!complete.cases(amd))
# apply interval averages to missing intervals
imputed_amd<-transform(amd
,steps=ifelse(is.na(amd$steps)
,amd_interval$steps[match(amd$interval,amd_interval$interval)]
,amd$steps))
# check for missing in new data set
sum(!complete.cases(imputed_amd))
#histogram of total daily
#create imputed daily totals
imputed_amd_daily<-aggregate(steps~date,imputed_amd,sum)
str(imputed_amd_daily)
# calculate mean
imputed_daily_mean<-mean(imputed_amd_daily$steps,na.rm=TRUE)
imputed_daily_mean
# calculate median
imputed_daily_median<-median(imputed_amd_daily$steps,na.rm=TRUE)
imputed_daily_median
#difference between imputed and original:
#mean
imputed_difference_mean<-imputed_daily_mean-daily_mean
imputed_difference_mean
#and median
imputed_difference_median<-imputed_daily_median-daily_median
imputed_difference_median
g<-qplot(steps,data=imputed_amd_daily,binwidth=500)
g+geom_vline(xintercept=imputed_daily_median,col="blue",lwd=0.5)+
geom_vline(xintercept=imputed_daily_mean,col="red",lwd=0.5)+
geom_text(aes(imputed_daily_mean,6,label=round(imputed_daily_mean,2),hjust=-.25,color="red"))+
labs(title="Mean Number of Steps per Day w/Imputed",x="Steps per Day",y="Number of Days")
# create days
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
table(amd$weekday)
# create days
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
table(amd$weekday)
# create weekend flag and indicator
amd$weekend_flag<-factor(isWeekend(amd$date))
amd$weekend_indicator<-ifelse(amd$weekend_flag==TRUE,c("Weekend"),c("Weekday"))
# validate
table(amd$weekend_indicator,amd$weekday)
amd_interval_weekends<-sqldf('
select
weekend_indicator
,interval
,avg(steps) as steps
from
amd
group by
weekend_indicator
,interval
order by
weekend_indicator
,interval
')
str(amd_interval_weekends)
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M"))+
geom_vline(xintercept=imputed_daily_mean,col="red",lwd=0.5)
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M"))
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M"),tz="EST")
str(amd_interval_weekends)
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M"),tz="EST")
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M",tz="EST"))
rm(list=ls())
library(data.table)
library(datasets)
library(sqldf)
library(dplyr)
library(lubridate)
library(ggplot2)
library(timeDate)
library(scales)
setwd("C:/coursera/RepData_PeerAssessment1")
getwd()
# note: due to my company firewall, I can't automate the web pull or "unzipping".
# Starting with the activity.csv file landed locally:
amd<-read.csv('activity.csv')
head(amd)
# preprocessing: date field to datetime type, create weekdays, and time
# date to datetime data type
amd$date<-as.Date(amd$date)
table(amd$date)
# time to datetime data type
amd$interval<-as.POSIXct(strptime(sprintf("%04d",amd$interval),"%H%M"))
table(amd$interval)
# note: date part defaults to today, handle with formatting later
#amd$time<-as.numeric(amd$interval-trunc(amd$interval,"days"))
#table(amd$time)
#str(amd)
# aggregate: total steps by day
amd_daily<-aggregate(steps~date,amd,sum)
# aggregate: average steps by interval
amd_interval<-aggregate(steps~interval,amd,mean)
```
## What is mean total number of steps taken per day?
```{r echo=TRUE}
# calculate mean
daily_mean<-mean(amd_daily$steps,na.rm=TRUE)
daily_mean
# calculate median
daily_median<-median(amd_daily$steps,na.rm=TRUE)
daily_median
# visualize with ggplot
g<-qplot(steps,data=amd_daily,binwidth=500)
g+geom_vline(xintercept=daily_median,col="blue",lwd=0.5)+
geom_vline(xintercept=daily_mean,col="red",lwd=0.5)+
geom_text(aes(daily_mean,6,label=round(daily_mean,2),hjust=-.25,color="red"))
labs(title="Mean Number of Steps per Day",x="Steps per Day",y="Number of Days")
max_steps<-max(amd_interval$steps)
max_steps
# calculate interval with maximum steps
max_interval<-amd_interval[which.max(amd_interval$steps),1]
max_interval
# visualize with time series plot (type ="l")
plot.new()
plot(amd_interval$interval
,amd_interval$steps
,type="l"
,main="Average Steps by Interval"
,xlab="Interval"
,ylab="Average Steps"
,abline(h=max_steps,col="red",lwd=1)
,abline(v=max_interval,col="red",lwd=1)
)
#horizontal line crossing y axis at maximum # of steps, with label
abline(h=max_steps,col="red",lwd=1)
text(x=(max_interval-9000),y=max_steps
,labels=round(max_steps,2),col="red",pos=1)
#vertical line crossing x axis at interval with max # of steps, with time label
abline(v=max_interval,col="red",lwd=1)
text(x=max_interval,y=10
,labels=format(max_interval,format="%H:%M"),col="red",pos=4)
sum(!complete.cases(amd))
# apply interval averages to missing intervals
imputed_amd<-transform(amd
,steps=ifelse(is.na(amd$steps)
,amd_interval$steps[match(amd$interval,amd_interval$interval)]
,amd$steps))
# check for missing in new data set
sum(!complete.cases(imputed_amd))
#histogram of total daily
#create imputed daily totals
imputed_amd_daily<-aggregate(steps~date,imputed_amd,sum)
str(imputed_amd_daily)
# calculate mean
imputed_daily_mean<-mean(imputed_amd_daily$steps,na.rm=TRUE)
imputed_daily_mean
# calculate median
imputed_daily_median<-median(imputed_amd_daily$steps,na.rm=TRUE)
imputed_daily_median
#difference between imputed and original:
#mean
imputed_difference_mean<-imputed_daily_mean-daily_mean
imputed_difference_mean
#and median
imputed_difference_median<-imputed_daily_median-daily_median
imputed_difference_median
#visualize with ggplot
g<-qplot(steps,data=imputed_amd_daily,binwidth=500)
g+geom_vline(xintercept=imputed_daily_median,col="blue",lwd=0.5)+
geom_vline(xintercept=imputed_daily_mean,col="red",lwd=0.5)+
geom_text(aes(imputed_daily_mean,6,label=round(imputed_daily_mean,2),hjust=-.25,color="red"))+
labs(title="Mean Number of Steps per Day w/Imputed",x="Steps per Day",y="Number of Days")
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
table(amd$weekday)
# create days, weekend flag and indicator
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
amd$weekend_flag<-factor(isWeekend(amd$date))
amd$weekend_indicator<-ifelse(amd$weekend_flag==TRUE,c("Weekend"),c("Weekday"))
# validate
table(amd$weekend_indicator,amd$weekday)
# 2. create panel plot
amd_interval_weekends<-sqldf('
select
weekend_indicator
,interval
,avg(steps) as steps
from
amd
group by
weekend_indicator
,interval
order by
weekend_indicator
,interval
')
str(amd_interval_weekends)
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M",tz="EST"))
Note: due to scale, median (in blue) may be difficult to see under the mean (in red)
Sys.timezone()
head(amd_interval_weekends)
g<-ggplot(data=amd_interval_weekends,aes(interval,steps))
g+geom_line(stat="identity")+facet_grid(weekend_indicator~.)+
scale_x_datetime(breaks = date_breaks("4 hour"),labels=date_format("%H:%M",tz="EST"))
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
table(amd$weekday)
amd$weekday<-wday(amd$date,label=TRUE,abbr=TRUE)
amd$weekend_flag<-factor(isWeekend(amd$date))
amd$weekend_indicator<-ifelse(amd$weekend_flag==TRUE,c("Weekend"),c("Weekday"))
# validate
table(amd$weekend_indicator,amd$weekday)
amd_interval_weekends<-sqldf('
select
weekend_indicator
,interval
,avg(steps) as steps
from
amd
group by
weekend_indicator
,interval
order by
weekend_indicator
,interval
')
head(amd_interval_weekends)
# plot weekday and weekend interval patterns, stacked
supressMessages(
library(data.table)
library(datasets)
library(sqldf)
library(dplyr)
library(lubridate)
library(ggplot2)
library(timeDate)
library(scales)
)
supressMessages(library(data.table))
library(datasets)
library(sqldf)
library(dplyr)
library(lubridate)
library(ggplot2)
library(timeDate)
library(scales)
suppressMessages(
library(data.table)
library(datasets)
library(sqldf)
library(dplyr)
library(lubridate)
library(ggplot2)
library(timeDate)
library(scales)
)
suppressMessages(library(data.table))
library(datasets)
imputed_difference_mean<-imputed_daily_mean-daily_mean
imputed_difference_mean
imputed_difference_mean<-imputed_daily_mean-daily_mean
imputed_difference_mean
imputed_difference_median<-imputed_daily_median-daily_median
imputed_difference_median
sum(!complete.cases(amd))
imputed_amd<-transform(amd
,steps=ifelse(is.na(amd$steps)
,amd_interval$steps[match(amd$interval,amd_interval$interval)]
,amd$steps))
sum(!complete.cases(imputed_amd))
imputed_amd_daily<-aggregate(steps~date,imputed_amd,sum)
str(imputed_amd_daily)
imputed_daily_mean<-mean(imputed_amd_daily$steps)
imputed_daily_mean
imputed_daily_median<-median(imputed_amd_daily$steps)
imputed_daily_median
imputed_difference_mean<-imputed_daily_mean-daily_mean
imputed_difference_mean
imputed_difference_median<-imputed_daily_median-daily_median
imputed_difference_median
